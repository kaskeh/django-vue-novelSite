"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# BASE_DIR = os.path.dirname(op.path.dirname(os.path.abspath(__file__
# .
# )))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-gwdja!9^i^w-o!37hw8880$%8nkay!(2x$f7gh2i-a5_my2hju'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    "rest_framework",
    # 'novel_site',
    'corsheaders',  # 添加：跨域组件
]

MIDDLEWARE = [
    # 跨域的中间件
    'corsheaders.middleware.CorsMiddleware',  # 添加：放首行（放其他行未测试）
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'),
                 os.path.join(BASE_DIR, "novel_site/templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': BASE_DIR / 'db.sqlite3',
    # }
'default': {
    	'ENGINE': 'django.db.backends.mysql', # 数据库引擎
     	'HOST': '127.0.0.1', # 数据库主机
      	'PORT': 3306, # 数据库端口
       	'USER': 'root', # 数据库用户名root
        'PASSWORD': "12345@admin", # 数据库用户密码
        'NAME': 'books' # 数据库名字
    }
}

# # 缓存
# CACHES = {
#     'session': {
#         'ENGINE': 'django_redis.cache.RedisCache',
#         "LOCATION": "redis://127.0.0.1:6379/1",
#         "OPTIONS": {
#                 "CLIENT_CLASS": "django_redis.client.DefaultClient",
#         }
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

# 不必为用户模型设置主键。django将自动添加它, 理解为primary_key
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CORS_ALLOW_CREDENTIALS = True
# 设置允许跨域的域名，*代表允许任意域名跨域
CORS_ORIGIN_ALLOW_ALL = True
CSRF_TRUSTED_ORIGINS = ['http://127.0.0.1:8080']
CORS_ORIGIN_WHITELIST = (
    #     '''
    #         版本包小于3.0不用加http版本包大于3.0则需要加http
    #     '''
    'http://127.0.0.1:8080',# 填写发送请求端的地址
    'http://localhost:8080',
    'http://127.0.0.1:8000',# 填写发送请求端的地址
    'http://localhost:8000',
)
# 允许的header类型
CORS_ALLOW_HEADERS = (
    'XMLHttpRequest',
    'X_FILENAME',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'Pragma',
)
# 跨域允许的请求方式
CORS_ALLOW_METHODS = (
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
    'VIEW',
)


# # 会话配置
# SESSION_ENGINE = "django.contrib.sessions.backends.cache"
# SESSION_CACHE_ALIAS = "session"

APPEND_SLASH=False # 当有些请求没有以/结尾时，设置这个可以让检测略过

# REST_FRAMEWORK中全局配置认证方式、权限方式。局部认证网上一大堆，请自查……^ ^
# 如settings.py文件中没有REST_FRAMEWORK，请自主写入
REST_FRAMEWORK = {
    # DEFAULT_PERMISSION_CLASSES设置默认的权限类，通过认证后赋予用户的权限
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    # DEFAULT_AUTHENTICATION_CLASSES设置默认的认证类，这里用token，也可以设置session或自定义的认证
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication', # 进行token认证


        m
    ),
    # 默认的页面大小分页设置
    # "PAGE_SIZE": 10
    # 默认分页类
    # 'DEFAULT_PAGINATION_CLASS':['app01.myuntils.Page2', 'app01.myuntils.Page3',],
}

# SIMPLE_JWT是token配置项，参数很多，不一一列举，请自查……^ ^
import datetime # 导入datetime库生成时间参数
SIMPLE_JWT = {
     # ACCESS_TOKEN_LIFETIME设置token令牌有效时间
     # rest_framework_simplejwt官方默认有效时间是5分钟，这里改成15天
     'ACCESS_TOKEN_LIFETIME': datetime.timedelta(days=15),
    # REFRESH_TOKEN_LIFETIME设置token刷新令牌有效时间
    'REFRESH_TOKEN_LIFETIME': datetime.timedelta(days=15),
    # 修改Authorization参数的认证数据前缀，使得与前端那边设置的 "JWT"一致
    # 免得出现{'detail': 'Authentication credentials were not provided.'}问题
    'AUTH_HEADER_TYPES': ('JWT',),
}

# AUTH_USER_MODEL是配置默认的校验数据表，取决你自己的用户表
# 参数格式为：(你自己创建的app文件夹名称).(app文件夹中models.py中用户表名称)
# 以下 login 为我创建的app文件夹名称， UserInfo 为login下的models.py中的用户表名称
AUTH_USER_MODEL = 'novel_site.User'

AUTH_PASSWORD_VALIDATORS = [ # 是配置创建用户时的默认参数，这里密码长度最小为5位字符，系统默认时8位 AUTH_PASSWORD_VALIDATORS = [
     {
          # 设置密码最小长度为5
          'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
          'OPTIONS': {'min_length': 5}
      },
]



